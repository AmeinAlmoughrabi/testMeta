import * as MRE from '@microsoft/mixed-reality-extension-sdk';
import StoryBoard from "./app";
import * as ARTIFACT from "./artifact";
import * as IMAGES from './images';
import { decisionScreenVulnerabilityOrange } from './decisionToolVulnerabilityOrange';
import { decisionScreenVulnerabilityRed } from './decisionToolVulnerabilityRed';

import { endStoryScreens } from './mainMenu';
import { endExperienceAvatar } from './talkingActor';
import { playInstructionVulnerabilitiesAudio  } from './audio';

import * as SCORE from './score';

export const FONT = MRE.TextFontFamily.SansSerif;

let orangeVulCompleted: boolean;
let redVulCompleted: boolean;


let popupLoadingLocation = { x: 0, y: 2, z: 0 };
let popupLoadingScale = {x:.2, y: .13, z:.001 };

let rightX = 2.09;
let rightZ = .1;

let leftX = -2.95;
let leftZ = .7;

let decisionRightLoc = { x: rightX, y: 2.9, z: rightZ };
let decisionRightBarLoc = { x: rightX, y: 1, z: rightZ };

let decisionLeftLoc = { x: leftX, y: 2.6, z: leftZ};
let decisionLeftBarLoc = { x: leftX, y: .9, z: leftZ };

function displayImage(app: StoryBoard, image: string, location: any, size: any): MRE.Actor {
	let displayScreenMaterial = app.assets.materials.find(x => x.name === image);
    let mesh = app.assets.meshes.find(x => x.name === "cube2");

    let backgroundImage = MRE.Actor.Create(app.context, {
        actor: {
            name: image,
            transform: { local: { position: location, scale: size} },
            collider: { geometry: { shape: MRE.ColliderType.Box, size: { x: 0.5, y: 0.2, z: 0.01 } } },
            appearance: {
                meshId: mesh.id,
                materialId: displayScreenMaterial.id
            },
            parentId: app.vulnerabilityAnchor.id
        }
    });
	return backgroundImage
}
function displayImageInv(app: StoryBoard, image: string, location: any, size: any): MRE.Actor {
	let displayScreenMaterial = app.assets.materials.find(x => x.name === image);
    let mesh = app.assets.meshes.find(x => x.name === "cube2");

    let backgroundImage = MRE.Actor.Create(app.context, {
        actor: {
            name: image,
            transform: { local: { position: location, scale: size} },
            collider: { geometry: { shape: MRE.ColliderType.Box, size: { x: 0.5, y: 0.2, z: 0.01 } } },
            appearance: {
                meshId: mesh.id,
				materialId: displayScreenMaterial.id,
				enabled: false
            },
            parentId: app.vulnerabilityAnchor.id
        }
    });
	
	return backgroundImage
}
function completeOrangeVul(app: StoryBoard){
	orangeVulCompleted = true;
	let leftVul = displayImage(app, IMAGES.PopUp_Vulnerabilities_Addressed, 
		decisionLeftLoc, popupLoadingScale)
	if(vulnerabilityCompletecheck()){
		setTimeout(() => {
			finishAlertVulnerability(app);
		},3000)
	}
}

function completeRedVul(app: StoryBoard){
	redVulCompleted = true;
	let rightVul = displayImage(app, IMAGES.PopUp_Vulnerabilities_Addressed, 
		decisionRightLoc, popupLoadingScale)
	if(vulnerabilityCompletecheck()){
		setTimeout(() => {
			finishAlertVulnerability(app);
		},3000)
	}
}

function vulnerabilityCompletecheck(){
	console.log(orangeVulCompleted)
	console.log(redVulCompleted)
	if(orangeVulCompleted){
		if(redVulCompleted){
			return true;
		}else{
			return false;
		}
	}else{
		return false;
	}
}
function displayOrangeVul(app:StoryBoard){
	decisionScreenVulnerabilityOrange(app, decisionLeftLoc, completeOrangeVul);
}

function displayRedVul(app:StoryBoard){
	decisionScreenVulnerabilityRed(app, decisionRightLoc, completeRedVul);
}
function loadingFlipBook(app: StoryBoard, popupLoadingLocation:any, popupLoadingScale: any){
	let popupLoading0: MRE.Actor;
	let popupLoading1: MRE.Actor;
	let popupLoading2: MRE.Actor;
	let popupLoading3: MRE.Actor;
	let popupLoading4: MRE.Actor;
	let popupLoading5: MRE.Actor;

	popupLoading0 = displayImageInv(app, IMAGES.PopUp_Vulnerabilities_Scanning0, 
		popupLoadingLocation, popupLoadingScale)
	popupLoading1 = displayImageInv(app, IMAGES.PopUp_Vulnerabilities_Scanning1, 
		popupLoadingLocation, popupLoadingScale)
	popupLoading2 = displayImageInv(app, IMAGES.PopUp_Vulnerabilities_Scanning2, 
		popupLoadingLocation, popupLoadingScale)
	popupLoading3 = displayImageInv(app, IMAGES.PopUp_Vulnerabilities_Scanning3, 
		popupLoadingLocation, popupLoadingScale)
	popupLoading4 = displayImageInv(app, IMAGES.PopUp_Vulnerabilities_Scanning4, 
		popupLoadingLocation, popupLoadingScale)
	popupLoading5 = displayImageInv(app, IMAGES.PopUp_Vulnerabilities_Scanning5, 
		popupLoadingLocation, popupLoadingScale)

	setTimeout(() => {
		popupLoading0.appearance.enabled = true;
	}, 100);
	setTimeout(() => {
		popupLoading1.appearance.enabled = true;
		popupLoading0.destroy();
	}, 1000);
	setTimeout(() => {
		popupLoading2.appearance.enabled = true;
		popupLoading1.destroy();
	}, 2000);
	setTimeout(() => {
		popupLoading3.appearance.enabled = true;
		popupLoading2.destroy();
	}, 3000);
	setTimeout(() => {
		popupLoading4.appearance.enabled = true;
		popupLoading3.destroy();
	}, 4000);
	setTimeout(() => {
		popupLoading5.appearance.enabled = true;
		popupLoading4.destroy();
	}, 5000);
	setTimeout(() => {
		popupLoading5.destroy();
	}, 6000);

}
export function alertStepVulnerabilityStart(app: StoryBoard) {

	app.vulnerabilityAnchor = MRE.Actor.Create(app.context);

	orangeVulCompleted = false;
	redVulCompleted = false;

	app.teamScoreVulnerability = 0;
	app.teamScoreVulnerabilityTimeBonus = 0;

	loadingFlipBook(app, popupLoadingLocation, popupLoadingScale);

	setTimeout(() => {
		playInstructionVulnerabilitiesAudio(app.assets, app.vulnerabilityAnchor);

		let miniWarehouseOverhead = MRE.Actor.CreateFromLibrary(app.context, {
			resourceId: ARTIFACT.Vulnerabilities,
			actor: {
				name: 'miniWarehouseOverhead',
				parentId: app.vulnerabilityAnchor.id,
				transform: {
					local: {
						position:{ x: .253, y: .25, z: -0.252 },
						rotation: { x: 0, y: 1, z: 0 },
						scale: { x: .6, y: .9, z: .6 }
					}
				},
			}
		});

		let rightVulBar = MRE.Actor.CreateFromLibrary(app.context, {
			resourceId: ARTIFACT.VulnerabilityRed,
			actor: {
				name: 'rightVulBar',
				parentId: app.vulnerabilityAnchor.id,
				transform: {
					local: {
						position: decisionRightBarLoc,
						//position:{ x: .253, y: 1.265, z: -0.252 },
						//rotation: { x: 0, y: 1, z: 0 },
						scale: { x: 1, y: 1, z: 1 }
					}
				},
			}
		});

		let leftVulBar = MRE.Actor.CreateFromLibrary(app.context, {
			resourceId: ARTIFACT.VulnerabilityOrange,
			actor: {
				name: 'leftVulBar',
				parentId: app.vulnerabilityAnchor.id,
				transform: {
					local: {
						position: decisionLeftBarLoc,
						//position:{ x: .253, y: 1.265, z: -0.252 },
						//rotation: { x: 0, y: 1, z: 0 },
						scale: { x: 1, y: 1, z: 1 }
					}
				},
			}
		});

		let growRightVulAnimData = app.assets.createAnimationData(
            "growRightVul",
            {
                tracks: [{
                    target: MRE.ActorPath("someBall").transform.local.scale,
                    keyframes: [{time: 0, value: rightVulBar.transform.local.scale},
                                {time: 2, value:  {x: 1, y: 2.5, z: 1 }}],
                    easing: MRE.AnimationEaseCurves.Linear
                }]
        });
        growRightVulAnimData.bind({ someBall: rightVulBar }, { isPlaying: true, wrapMode: MRE.AnimationWrapMode.Once});

		let growLeftVulAnimData = app.assets.createAnimationData(
            "growLeftVul",
            {
                tracks: [{
                    target: MRE.ActorPath("someBall").transform.local.scale,
                    keyframes: [{time: 0, value: leftVulBar.transform.local.scale},
                                {time: 2, value:  {x: 1, y: 1.5, z: 1 }}],
                    easing: MRE.AnimationEaseCurves.Linear
                }]
        });
        growLeftVulAnimData.bind({ someBall: leftVulBar }, { isPlaying: true, wrapMode: MRE.AnimationWrapMode.Once});

		let rightVul = displayImage(app, IMAGES.PopUp_Vulnerabilities_DetectedRed, 
			decisionRightLoc, popupLoadingScale)

		let rightVulButton = MRE.Actor.CreateFromLibrary(app.context, {
			resourceId: ARTIFACT.screen,
			actor: {
				name: 'rightVulButton',
				parentId: app.vulnerabilityAnchor.id,
				appearance: {enabled: false},
				transform: {
					local: {
						position: decisionRightLoc,
						rotation: { x: 0, y: 0, z: 0 },
						scale: { x: .19, y: .11, z: .1 }
					}
				},
			}
		});

		rightVulButton.setBehavior(MRE.ButtonBehavior).onClick(user => {
			rightVul.destroy();
			rightVulButton.destroy();
			displayRedVul(app);
		});
		let leftVul = displayImage(app, IMAGES.PopUp_Vulnerabilities_DetectedOrange, 
			decisionLeftLoc, popupLoadingScale)

		let leftVulButton = MRE.Actor.CreateFromLibrary(app.context, {
			resourceId: ARTIFACT.screen,
			actor: {
				name: 'leftVulButton',
				parentId: app.vulnerabilityAnchor.id,
				appearance: {enabled: false},
				transform: {
					local: {
						position: decisionLeftLoc,
						rotation: { x: 0, y: 0, z: 0 },
						scale: { x: .19, y: .11, z: .1 }
					}
				},
			}
		});

		leftVulButton.setBehavior(MRE.ButtonBehavior).onClick(user => {
			leftVul.destroy();
			leftVulButton.destroy();
			displayOrangeVul(app);
		});
	}, 6000)

}	

function finishAlertVulnerability(app: StoryBoard) {
	app.alertVulnerabilityCompletionStatus = true;
	app.vulnerabilityAnchor.destroy();
	endExperienceAvatar(app);
	endStoryScreens(app);
	SCORE.saveFinalScore(app, app.teamName, app.teamScore);
}

